ECE454 Assignment 4 Report
Elizabeth Binks

Q1. Why is it important to #ifdef out methods and datastructures that aren’t used for different versions of randtrack? 

This is important because we want to be able to run different versions of randtrack using the same project files.

Q2. How difficult was using TM compared to implementing global lock above? 

Using TM was slightly easier, since it didn't require any initialization or cleanup; it was only a 
one line + scope change.




While having a single global lock is easy to implement, it is often better for performance to have multiple
locks that protect smaller data structures, i.e., “fine-grain locks”. Create a version of the program called
randtrack_list_lock that creates a pthread_mutex for every location in the hash array (eg., one
for each list), and synchronizes using those locks. You will find that this requires a bit of thinking. 

Q3. Can you implement this without modifying the hash class, or without knowing its internal
implementation?

Yes, we can make an array that has a lock for every index between 0 to RAND_NUM_UPPER_BOUND-1, since that is the maximum amount of possible keys in the hash table.

Q4. Can you properly implement this solely by modifying the hash class methods lookup and insert?
Explain.

Yes, in randtrack_global_lock and randtrack_list_lock, if you put a mutex directly before and directly after the lookup and insert calls,
the program works as expected. So, if these lock/unlock calls were moved inside the hash class, the program would work the same.

Q5. Can you implement this by adding to the hash class a new function lookup and insert if absent? Explain.

Yes, in randtrack_global_lock and randtrack_list_lock, if you lock the mutex before the lookup and unlock if after the insert, the function works as expected. If a new lookup_and_insert_if_absent  were to be made, you would need to make sure that the lock goes around that function call. 

Q6. Can you implement it by adding new methods to the hash class lock list and unlock list? Explain.
Implement the simplest solution above that works (or a better one if you can think of one).

Yes, you would have to create a lock for each list in the hash class, then lock and unlock the respective lock in the lock_list and unlock_list and add calls to lock_list and unlock_list in the lookup and insert functions. 

Q7. How difficult was using TM compared to implementing list locking above? 

List locking was slightly more effort since I needed to initialize the array of locks.






Rather than sharing and synchronizing on the hash table, another solution could instead give each thread
its own private copy of a hash table, each counts its streams into that local hash table, then combine the
counts from the multiple hash tables into one at the end before printing. Call this version
randtrack_reduction.

Q8. What are the pros and cons of this approach? 

Pros: don't need to worry about concurrency and locking.
Cons: There is overhead to creating multiple hash tables as well as combining the hash tables at the end. It will be a lot slower since we need to access all the keys in multiple hash tables to add them up.